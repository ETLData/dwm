# ---- Agglomerative Clustering ----

import math

# Step 1: Dataset
points = [(1, 1), (2, 1), (5, 4), (6, 4)]

# Step 2: Distance function (Euclidean distance)
def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

# Step 3: Start with each point as its own cluster
clusters = [[p] for p in points]

# Step 4: Iteratively merge the two closest clusters
while len(clusters) > 1:
    min_dist = 999
    pair = (0, 1)

    # Find the closest pair of clusters
    for i in range(len(clusters)):
        for j in range(i + 1, len(clusters)):
            for p1 in clusters[i]:
                for p2 in clusters[j]:
                    d = distance(p1, p2)
                    if d < min_dist:
                        min_dist = d
                        pair = (i, j)

    # Merge the closest pair
    c1, c2 = pair
    clusters[c1].extend(clusters[c2])
    clusters.pop(c2)

    # Display the merge step
    print("Merged:", clusters)

# ------------------------------------------
# HOW TO RUN IN TERMINAL:
# 1. Save this file as agglomerative.py
# 2. Open terminal / command prompt.
# 3. Navigate to the folder containing the file.
# 4. Run the command:
#       python agglomerative.py
#
# Expected Output (sample):
# Merged: [[(1, 1), (2, 1)], [(5, 4)], [(6, 4)]]
# Merged: [[(1, 1), (2, 1)], [(5, 4), (6, 4)]]
# Merged: [[(1, 1), (2, 1), (5, 4), (6, 4)]]
#
# Explanation:
# - (1,1) and (2,1) merge first (closest points)
# - (5,4) and (6,4) merge next
# - Finally, both clusters merge into one
# ------------------------------------------
