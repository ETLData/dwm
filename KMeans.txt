# ---- K-Means Clustering ----

import math

# Step 1: Dataset
points = [(2, 10), (2, 5), (8, 4), (5, 8), (7, 5), (6, 4)]

# Step 2: Initial centroids
centroids = [(2, 10), (5, 8)]

# Function to calculate Euclidean distance
def distance(p1, p2):
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)

# Step 3: Repeat clustering for a few iterations
for iteration in range(3):
    print("\nIteration:", iteration + 1)

    # Assign points to the nearest centroid
    cluster1, cluster2 = [], []
    for p in points:
        d1 = distance(p, centroids[0])
        d2 = distance(p, centroids[1])
        if d1 < d2:
            cluster1.append(p)
        else:
            cluster2.append(p)

    # Step 4: Update centroids based on cluster means
    new_c1 = (
        sum(p[0] for p in cluster1) / len(cluster1),
        sum(p[1] for p in cluster1) / len(cluster1)
    )
    new_c2 = (
        sum(p[0] for p in cluster2) / len(cluster2),
        sum(p[1] for p in cluster2) / len(cluster2)
    )

    centroids = [new_c1, new_c2]

    # Display results for this iteration
    print("Cluster 1:", cluster1)
    print("Cluster 2:", cluster2)
    print("New Centroids:", centroids)

# ------------------------------------------
# HOW TO RUN IN TERMINAL:
# 1. Save this file as kmeans.py
# 2. Open terminal / command prompt.
# 3. Navigate to the folder containing the file.
# 4. Run the command:
#       python kmeans.py
#
# Expected Output (sample):
# Iteration: 1
# Cluster 1: [(2, 10), (5, 8)]
# Cluster 2: [(2, 5), (8, 4), (7, 5), (6, 4)]
# New Centroids: [(3.5, 9.0), (5.75, 4.5)]
#
# Iteration: 2
# Cluster 1: [(2, 10), (5, 8)]
# Cluster 2: [(2, 5), (8, 4), (7, 5), (6, 4)]
# New Centroids: [(3.5, 9.0), (5.75, 4.5)]
#
# Iteration: 3
# (Similar clusters, centroids stabilize)
# ------------------------------------------
